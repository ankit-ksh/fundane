#! /usr/bin/python3


#Importing the modules at start. If possible distribute the importing to make the code execution faster at start
import os
from requests import get
from yt_dlp import YoutubeDL




#Creating a Class to contain all the attributes and methods for a general video download. Functions are in sequenctial order of their execution in a normal process of downloading
class Minimalist:
    def  __init__(self):
        self.quality = "bestaudio"
        self.song_list = input("Which songs (input as many as you like, separated with commas): ")
        self.ydl_opts = {
            #'format': 'bestaudio',
            'format' : self.quality,
            # ℹ️ See help(yt_dlp.postprocessor) for a list of available Postprocessors and their arguments
            'postprocessors': [{  # Extract audio using ffmpeg
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
            }]
        }




    #change a list of search terms to a list of corresponding urls on YouTube
    def name_to_url(self):
        def check_if_url(self, string):                                    #In the below function, we are checking if the a given string is a url or not, using the regular expression(re) module in Python
            import re
            regex = re.compile(
                    r'^(?:http|ftp)s?://' # http:// or https://
                    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
                    r'localhost|' #localhost...
                    r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
                    r'(?::\d+)?' # optional port
                    r'(?:/?|[/?]\S+)$', re.IGNORECASE)
            #returns true if any the string argument matches even one of the given expression for links
            return (re.match(regex, string) is not None)
        
        def search(self, arg):                                            #defining the function to extract the video title or other info from just a keyword search
            with YoutubeDL() as ydl:
                try:
                    get(arg) 
                except:
                    video = ydl.extract_info(f"ytsearch:{arg}", download=False)['entries'][0]
                else:
                    video = ydl.extract_info(arg, download=False)
            return [video['webpage_url'], video['title']]
        #Changing each non url entry to the corresponding YouTube link
        for n in range(len(self.song_list)):
            if check_if_url(self, self.song_list[n]) == False:
                self.song_list[n] = search(self, self.song_list[n])[0]

    #takes input for every attribute of the future object including song list, and also processes it to make it readymade to be used by the download method
    def process_input(self):
        self.song_list = self.song_list.split(',')
        for n in range(len(self.song_list)):
            self.song_list[n] = self.song_list[n].strip(' ')
        #employing name_to_url method to changing non urls in the song_list to correspoding urls
        self.name_to_url()


    #Choosing the folder of the choice to download the file into, and also changing the directory
    def choose_folder_and_move(self):
        #changing the directory first is necessary since the list of folders has to be displayed
        try:
                os.chdir(f"/mnt/Cave/Home/Music")   #changed the directory to Music in the Home directory, if exception arise, it will be handled below
        except:
                print("There's some problem. Couldn't find the directory at all. Welcome to rectify the code.")

        #deciding which folder in the Music directory will the file be downloaded
        #displaying the name of list of all folders to give user the choice
        print('\n', '-' * 50, "Type name of any of the folders from the given list", '-' * 50, '\n', sep = '\n')
        items = os.listdir('.')
        for item in items:
            if os.path.isdir(item):
                print(item)

        folder = input('\nFolder: ')    #finally taking input from the user for the decided folder name

        #Changing the directory or first making that, based on different options
        if folder != '':
            try:
                os.chdir(f"/mnt/Cave/Home/Music/{folder}")   #changed the directory to folder variable as the user said, if exception arise, it will be handled below
            except FileNotFoundError:
                os.mkdir(f"/mnt/Cave/Home/Music/{folder}")
                os.chdir(f"/mnt/Cave/Home/Music/{folder}")   #changed the directory to folder variable as the user said, exception arose, solved
            except:
                print("There's some problem. Couldn't find the directory at all. Welcome to rectify the code.")
        else:
            os.chdir(f"/mnt/Cave/Home/Music")
        
        return f"/mnt/Cave/Home/Music/{folder}"

    
    #Finally with all things set, downloading all the songs contained in the list_of_songs list as their YouTube URLs, in the folder chosen
    def ytdlp_download(self):
        with YoutubeDL(self.ydl_opts) as ydl:
            error_code = ydl.download(self.song_list)

    #I've defined each function. Now time to use them all to for the object created, to download the file, which should be callable from the object and the dot notation
    def download(self):
        if self.song_list != '':
            self.process_input()
            self.choose_folder_and_move()
            self.ytdlp_download()
        else:
            print('\n', "Song name was   empty. So quitting...")





song = Minimalist()
song.download()








# #Creating a class for Detailed mode of download
# class Detailed(General):
#     def __init__(self, type, quality, format):
#         super().__init__(type, quality)
#         self.format = format
        






# #taking the user input for the first song, or the only song
# first_song = input("which song: ")

# #aborting if the first song input is empty string
# if first_song == '':
#     exit("\nExiting........")
# list_of_songs = [first_song]











# #finally printing the list of all the songs user has selected
# if len(list_of_songs) > 1:
#     print("\nOk, Here's the list of songs that's starting to download now\n")
#     #then running a for loop to display the list of songs
#     for n in range(len(list_of_song_title_on_youtube)):
#         print(f"{n+1}. {list_of_song_title_on_youtube[n]}")
#     print("\n")
# else:
#     print(f"\nDownloading the song: {list_of_song_title_on_youtube[0]}\n")







#lets also track time
import time
st = time.time()




# #Final Info

# if folder == '':
#     folder = 'Music folder inside the Home directory'
# else:
#     folder = folder + ' folder inside the Music Folder inside the Home directory'


# #finally printing the list of all the songs user has selected
# if len(list_of_songs) > 1:
#     print(f"\nThese songs have been downloaded and are in the {folder} folder of the Home directory of your computer.\n")
#     #then running a for loop to display the list of songs
#     for n in range(len(list_of_song_title_on_youtube)):
#         print(f"{n+1}. {list_of_song_title_on_youtube[n]}")
#     print("\n")
# else:
#     print(f"\nDownloaded the song {list_of_song_title_on_youtube[0]} and it's in the {folder} of your computer.\n")



# elapsed_time = time.time() - st
# print('\nExecution time:', time.strftime("%H:%M:%S", time.gmtime(elapsed_time)))







#the code below is deprecated (that's why commented)
# #take input, in case the user wants to download any other song along with that
# second_song = input("\nAny other song you want to download. If not press ENTER: ")
# if second_song != '':
#     list_of_songs.append(second_song)
#     curr_input = second_song
#     while curr_input != '':
#         next_song = input("\nWhich other one [If No other song, press ENTER]: ")
#         if next_song != '':
#             list_of_songs.append(next_song)
#         else:
#             curr_input = next_song

