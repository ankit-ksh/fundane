#!/usr/bin/bash

# Default settings
DEFAULT_QUALITY=1080
DEFAULT_COURSE_DIR='/home/ankit/Videos/Courses'
DEFAULT_PLAYLIST=false

# Function to display help
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Download video lectures with yt-dlp."
    echo
    echo "Options:"
    echo "  -q, --quality <quality>   Set video quality (default: $DEFAULT_QUALITY)"
    echo "  -l, --link <link>         Provide video link (clipboard if not provided)"
    echo "  -p, --playlist            Download full playlist (default: false)"
    echo "  -n, --numbers <numbers>   Specify specific video numbers separated by commas (e.g. 1,3,5)"
    echo "  -d, --directory <dir>     Specify custom directory (default: $DEFAULT_COURSE_DIR)"
    echo "  -h, --help                Show this help message"
}

# If no flags are provided, show usage instructions
if [ $# -eq 0 ]; then
    usage
    exit 0
fi

# Parse command-line arguments
while [[ "$1" =~ ^- ]]; do
    case "$1" in
        -q|--quality)
            quality=$2
            shift 2
            ;;
        -l|--link)
            url=$2
            shift 2
            ;;
        -p|--playlist)
            playlist=true
            shift
            ;;
        -n|--numbers)
            numbers=$2
            shift 2
            ;;
        -d|--directory)
            course_dir=$2
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Set default values if not provided
quality=${quality:-$DEFAULT_QUALITY}
course_dir=${course_dir:-$DEFAULT_COURSE_DIR}
playlist=${playlist:-$DEFAULT_PLAYLIST}

# Check if the URL is provided, if not, take it from the clipboard
if [ -z "$url" ]; then
    url=$(xclip -selection clipboard -o)
    if [[ ! "$url" =~ ^https?://(www\.)?youtube\.com/ ]]; then
        echo "Valid YouTube link not found. Please provide a valid link or use clipboard."
        exit 1
    fi
    echo "The link is taken from the clipboard: $url"
fi

# Validate quality input
if ! [[ "$quality" =~ ^[0-9]+$ ]] || [ "$quality" -le 0 ]; then
    echo "Invalid quality. Using default quality $DEFAULT_QUALITY."
    quality=$DEFAULT_QUALITY
fi

# Ensure course directory exists
if [ ! -d "$course_dir" ]; then
    echo "Directory $course_dir does not exist. Creating it now."
    mkdir -p "$course_dir"
fi

# Change to course directory
cd "$course_dir" || exit

# Playlist handling and user input for start/end video
if [ "$playlist" = true ]; then
    echo "Playlist download mode enabled."
    echo "Starting from video number: "
    read start
    echo "Ending at video number: "
    read end

    # Validate start/end
    start=${start:-1}
    end=${end:-100}

    # Start download and show progress
    yt-dlp -f "ba+bv[height<=$quality]" --yes-playlist --progress --embed-subs --write-auto-sub \
           --embed-chapters --merge-output-format mkv --output "%(playlist_title)s/%(playlist_index)s. %(title)s.%(ext)s" \
           --sponsorblock-remove default --playlist-start "$start" --playlist-end "$end" "$url" | \
           grep -E "([0-9]+%\s*|^Destination|^Downloading)"
    
# Specific video numbers
elif [ -n "$numbers" ]; then
    echo "Downloading specific videos: $numbers"
    IFS=',' read -r -a video_numbers <<< "$numbers"
    
    for num in "${video_numbers[@]}"; do
        yt-dlp -f "ba+bv[height<=$quality]" --no-playlist --progress --embed-subs --write-auto-sub \
               --embed-chapters --merge-output-format mkv --output "%(playlist_title)s/$num. %(title)s.%(ext)s" \
               --sponsorblock-remove default --playlist-start "$num" --playlist-end "$num" "$url" | \
               grep -E "([0-9]+%\s*|^Destination|^Downloading)"
    done

else
    echo "Single video download mode enabled."
    yt-dlp -f "ba+bv[height<=$quality]" --no-playlist --progress --embed-subs --write-auto-sub \
           --embed-chapters --merge-output-format mkv --output "%(title)s.%(ext)s" \
           --sponsorblock-remove default "$url" | \
           grep -E "([0-9]+%\s*|^Destination|^Downloading)"
fi

# Return to original directory
cd -

# Final information about download
echo "Download completed with quality: $quality"
if [ "$playlist" = true ]; then
    echo "Playlist download mode enabled, videos from $start to $end."
elif [ -n "$numbers" ]; then
    echo "Downloading specific videos: $numbers"
else
    echo "Single video downloaded."
fi

echo "All files are saved to: $course_dir"

