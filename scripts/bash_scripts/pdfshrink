#!/bin/sh

# Script to reduce PDF file size by lossy recompression using Ghostscript.
# This script works by downsampling images within the PDF, and optionally
# converting the PDF to grayscale to further reduce file size. The script
# is designed to work in a Unix-like environment and utilizes Ghostscript
# to apply the recompression.

# Usage:
# 1. To shrink a PDF file:
#    ./shrink_pdf.sh [-g] [-o output] [-r resolution] input.pdf
#
# Options:
#   -g          Enable grayscale conversion, which can further reduce the size.
#   -o output   Specify output file (default: standard output).
#   -r res      Set resolution for image downsampling (default: 72 DPI).
#   -h          Display this help message and exit.
#
# Example:
#   ./shrink_pdf.sh -g -o output.pdf -r 150 input.pdf
#   This command will compress 'input.pdf' into 'output.pdf' with grayscale
#   conversion and a resolution of 150 DPI.

# Functions
shrink ()
{
	if [ "$grayscale" = "YES" ]; then
		gray_params="-sProcessColorModel=DeviceGray \
		             -sColorConversionStrategy=Gray \
		             -dOverrideICC"
	else
		gray_params=""
	fi

	# Allow unquoted variables; we want word splitting for $gray_params.
	# shellcheck disable=SC2086
	gs					\
	  -q -dNOPAUSE -dBATCH -dSAFER		\
	  -sDEVICE=pdfwrite			\
	  -dCompatibilityLevel="$4"		\
	  -dPDFSETTINGS=/screen			\
	  -dEmbedAllFonts=true			\
	  -dSubsetFonts=true			\
	  -dAutoRotatePages=/None		\
	  -dColorImageDownsampleType=/Bicubic	\
	  -dColorImageResolution="$3"		\
	  -dGrayImageDownsampleType=/Bicubic	\
	  -dGrayImageResolution="$3"		\
	  -dMonoImageDownsampleType=/Subsample	\
	  -dMonoImageResolution="$3"		\
	  -sOutputFile="$2"			\
	  ${gray_params}			\
	  "$1"
}

get_pdf_version ()
{
	# $1 is the input file. The PDF version is contained in the
	# first 1024 bytes and will be extracted from the PDF file.
	pdf_version=$(cut -b -1024 "$1" | awk 'BEGIN { found=0 }{ if (match($0, "%PDF-[0-9]\\.[0-9]") && ! found) { print substr($0, RSTART + 5, 3); found=1 } }')
	if [ -z "$pdf_version" ] || [ "${#pdf_version}" != "3" ]; then
		return 1
	fi
}

check_input_file ()
{
	# Check if the given file exists.
	if [ ! -f "$1" ]; then
		echo "Error: Input file does not exist." >&2
		return 1
	fi
}

check_smaller ()
{
	# If $1 and $2 are regular files, we can compare file sizes to
	# see if we succeeded in shrinking. If not, we copy $1 over $2:
	if [ ! -f "$1" ] || [ ! -f "$2" ]; then
		return 0;
	fi
	ISIZE="$(wc -c "$1" | awk '{ print $1 }')"
	OSIZE="$(wc -c "$2" | awk '{ print $1 }')"
	if [ "$ISIZE" -lt "$OSIZE" ]; then
		echo "Input smaller than output, doing straight copy" >&2
		cp "$1" "$2"
	fi
}

check_overwrite ()
{
	# If $1 and $2 refer to the same file, then the file would get
	# truncated to zero, which is unexpected. Abort the operation.
	# Unfortunately the stronger `-ef` test is not in POSIX.
	if [ "$1" = "$2" ]; then
		echo "The output file is the same as the input file. This would truncate the file." >&2
		echo "Use a temporary file as an intermediate step." >&2
		return 1
	fi
}

usage ()
{
	echo "Reduces PDF filesize by lossy recompressing with Ghostscript."
	echo "This script will compress PDF files by downsampling images, and optionally convert the file to grayscale for further reduction in size."
	echo
	echo "Usage: $1 [-g] [-h] [-o output] [-r res] infile"
	echo
	echo "Options:"
	echo " -g  Enable grayscale conversion which can further reduce output size."
	echo " -h  Show this help text."
	echo " -o  Output file, default is standard output."
	echo " -r  Resolution in DPI, default is 72."
}

# Set default option values.
grayscale=""
ofile="-"
res="72"

# Parse command line options.
while getopts ':hgo:r:' flag; do
  case $flag in
    h)
      usage "$0"
      exit 0
      ;;
    g)
      grayscale="YES"
      ;;
    o)
      ofile="${OPTARG}"
      ;;
    r)
      res="${OPTARG}"
      ;;
    \?)
      echo "invalid option (use -h for help)"
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1))

# An input file is required.
if [ -z "$1" ]; then
	usage "$0"
	exit 1
else
	ifile="$1"
fi

# Check if input file exists
check_input_file "$ifile" || exit $?

# Check that the output file is not the same as the input file.
check_overwrite "$ifile" "$ofile" || exit $?

# Get the PDF version of the input file.
get_pdf_version "$ifile" || pdf_version="1.5"

# Shrink the PDF.
shrink "$ifile" "$ofile" "$res" "$pdf_version" || exit $?

# Check that the output is actually smaller.
check_smaller "$ifile" "$ofile"

